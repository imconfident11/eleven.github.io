<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2025/02/17/hello-world/</url>
    <content><![CDATA[<p><em>Welcome to my blog.</em><br><em>I’m  <strong>Eleven</strong>.</em><br><em>So nice to meet you.</em></p>
<hr>
<h3 id="“And-it’s-fine-to-fake-it-‘til-you-make-it"><a href="#“And-it’s-fine-to-fake-it-‘til-you-make-it" class="headerlink" title="“And it’s fine to fake it ‘til you make it"></a>“<em>And it’s fine to fake it ‘til you make it</em></h3><h3 id="‘Til-you-do-’til-it’s-true-“"><a href="#‘Til-you-do-’til-it’s-true-“" class="headerlink" title="‘Til you do,’til it’s true.“"></a>‘<em>Til you do,’til it’s true.</em>“</h3><p><em><strong>It’s better to burn out than to fade away.</strong></em></p>
]]></content>
  </entry>
  <entry>
    <title>明文攻击(特别的)</title>
    <url>/2025/02/20/1/</url>
    <content><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>没有通常会给的已知文件，只给了一个压缩包，里面是被加密的一张png图片</p>
<h4 id="了解一下-明文攻击"><a href="#了解一下-明文攻击" class="headerlink" title="了解一下 明文攻击"></a>了解一下 <code>明文攻击</code></h4><ul>
<li>符合哪些特征可以使用明文攻击<ol>
<li>Zip文件</li>
<li>文件均为ZipCrypto加密</li>
<li>已知加密文件的部分明文（8字节，12字节）<br> <strong>但这一条不是必须的内容,当只给出一张图片，且为ZipCrypto（Store）加密时，也能使用明文攻击，如本题</strong></li>
</ol>
</li>
</ul>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ol>
<li>获取png文件头,得到png_hearder文件</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 十六进制字符串</span></span><br><span class="line">hex_string = <span class="string">&quot;89504E470D0A1A0A0000000D49484452&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将十六进制字符串转换为字节数据</span></span><br><span class="line">binary_data = <span class="built_in">bytes</span>.fromhex(hex_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将字节数据写入文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;png_header&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(binary_data)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;文件 &#x27;png_header&#x27; 已成功创建！&quot;</span>)</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>使用工具<code>bkcrack</code>得到密钥</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PS D:\CTF\tool\bkcrack&gt; .\bkcrack.exe -C bkcrack_advanced.zip -c a.png -p png_header</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Keys: b53dcc5c 19c8786e f0298d20</p>
<ol start="3">
<li>利用密钥破解文件</li>
</ol>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PS D:\CTF\tool\bkcrack&gt; .\bkcrack.exe -C bkcrack_advanced.zip -c a.png -k b53dcc5c 19c8786e f0298d20 -d 1.png</span><br></pre></td></tr></table></figure>

<p>得到解密后的文件<code>1.png</code></p>
]]></content>
      <categories>
        <category>-CTF</category>
      </categories>
      <tags>
        <tag>Misc</tag>
      </tags>
  </entry>
  <entry>
    <title>Hgame CTF 2025题目复现</title>
    <url>/2025/02/23/2/</url>
    <content><![CDATA[<h1 id="REverse"><a href="#REverse" class="headerlink" title="REverse"></a>REverse</h1><h2 id="Turtle"><a href="#Turtle" class="headerlink" title="Turtle"></a>Turtle</h2><ol>
<li>用<code>Exeinfo PE</code>打开发现是upx壳，而且题目也提示了需要脱壳，upx壳被魔改过了，用普通脱壳工具无效，于是手动脱壳。<br><img src="/images/2/1.png" alt="Exeinfo PE"><blockquote>
<p>ps：有的魔改后的upx壳可以在010editor中改（把add0-&gt;upx0,add1-&gt;upx1……,本题为只读文见改不了） </p>
</blockquote>
</li>
<li>用xdbg64打开，oep脱壳定律找到大跳转，打断点<br><img src="/images/2/2.png" alt="xdbg64"></li>
<li>F9运行，接着用<code>Scylla</code>Dump，oep为00000000004014E0,生成Turtle_dump.exe<br><img src="/images/2/3.png" alt="Scylla Dump"><br><img src="/images/2/4.png" alt="Turtle_dump.exe"><br>接着先后点击<code>IAT Autosearch</code>,<code>Get Imports</code>,<code>Fix Dump</code>,这里打开Turtle_dump.exe，之后打开文件夹就会看到新生成的Turtle_dump_SCY.exe文件了。<br><img src="/images/2/5.png" alt="IAT Autosearch"><br><img src="/images/2/6.png" alt="Get Imports"></li>
<li>将Turtle_dump_SCY.exe用IDA(64)打开，发现可以正常地看到函数了，找到main函数，F5反汇编一下<br><img src="/images/2/7.png" alt="main"></li>
<li>点开函数后可以看出sub_401550是rc4 init，而sub_40163E（标准）和sub_40175A（魔改）是两个rc4</li>
<li>解出flag</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher.ARC4 <span class="keyword">import</span> *  </span><br><span class="line">enc_key = <span class="built_in">bytes</span>([</span><br><span class="line"> <span class="number">0xCD</span>,</span><br><span class="line"> <span class="number">0x8F</span>,</span><br><span class="line"> <span class="number">0x25</span>,</span><br><span class="line"> <span class="number">0x3D</span>,</span><br><span class="line"> <span class="number">0xE1</span>,</span><br><span class="line"> ])</span><br><span class="line"> </span><br><span class="line">enc_key += <span class="string">b&#x27;QJ&#x27;</span></span><br><span class="line"> </span><br><span class="line">cipher = new(<span class="string">b&#x27;yekyek&#x27;</span>)</span><br><span class="line">dec_key = cipher.decrypt(enc_key)</span><br><span class="line"><span class="built_in">print</span>(dec_key)</span><br><span class="line"><span class="comment">#ecg4ab6</span></span><br><span class="line"> </span><br><span class="line">enc_flag = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>)]</span><br><span class="line">v5 = enc_flag</span><br><span class="line">v5[<span class="number">0</span>] = -<span class="number">8</span></span><br><span class="line">v5[<span class="number">1</span>] = -<span class="number">43</span></span><br><span class="line">v5[<span class="number">2</span>] = <span class="number">98</span></span><br><span class="line">v5[<span class="number">3</span>] = -<span class="number">49</span></span><br><span class="line">v5[<span class="number">4</span>] = <span class="number">67</span></span><br><span class="line">v5[<span class="number">5</span>] = -<span class="number">70</span></span><br><span class="line">v5[<span class="number">6</span>] = -<span class="number">62</span></span><br><span class="line">v5[<span class="number">7</span>] = <span class="number">35</span></span><br><span class="line">v5[<span class="number">8</span>] = <span class="number">21</span></span><br><span class="line">v5[<span class="number">9</span>] = <span class="number">74</span></span><br><span class="line">v5[<span class="number">10</span>] = <span class="number">81</span></span><br><span class="line">v5[<span class="number">11</span>] = <span class="number">16</span></span><br><span class="line">v5[<span class="number">12</span>] = <span class="number">39</span></span><br><span class="line">v5[<span class="number">13</span>] = <span class="number">16</span></span><br><span class="line">v5[<span class="number">14</span>] = -<span class="number">79</span></span><br><span class="line">v5[<span class="number">15</span>] = -<span class="number">49</span></span><br><span class="line">v5[<span class="number">16</span>] = -<span class="number">60</span></span><br><span class="line">v5[<span class="number">17</span>] = <span class="number">9</span></span><br><span class="line">v5[<span class="number">18</span>] = -<span class="number">2</span></span><br><span class="line">v5[<span class="number">19</span>] = -<span class="number">29</span></span><br><span class="line">v5[<span class="number">20</span>] = -<span class="number">97</span></span><br><span class="line">v5[<span class="number">21</span>] = <span class="number">73</span></span><br><span class="line">v5[<span class="number">22</span>] = -<span class="number">121</span></span><br><span class="line">v5[<span class="number">23</span>] = -<span class="number">22</span></span><br><span class="line">v5[<span class="number">24</span>] = <span class="number">89</span></span><br><span class="line">v5[<span class="number">25</span>] = -<span class="number">62</span></span><br><span class="line">v5[<span class="number">26</span>] = <span class="number">7</span></span><br><span class="line">v5[<span class="number">27</span>] = <span class="number">59</span></span><br><span class="line">v5[<span class="number">28</span>] = -<span class="number">87</span></span><br><span class="line">v5[<span class="number">29</span>] = <span class="number">17</span></span><br><span class="line">v5[<span class="number">30</span>] = -<span class="number">63</span></span><br><span class="line">v5[<span class="number">31</span>] = -<span class="number">68</span></span><br><span class="line">v5[<span class="number">32</span>] = -<span class="number">3</span></span><br><span class="line">v5[<span class="number">33</span>] = <span class="number">75</span></span><br><span class="line">v5[<span class="number">34</span>] = <span class="number">87</span></span><br><span class="line">v5[<span class="number">35</span>] = -<span class="number">60</span></span><br><span class="line">v5[<span class="number">36</span>] = <span class="number">126</span></span><br><span class="line">v5[<span class="number">37</span>] = -<span class="number">48</span></span><br><span class="line">v5[<span class="number">38</span>] = -<span class="number">86</span></span><br><span class="line">v5[<span class="number">39</span>] = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">add_bytes = new(<span class="string">b&#x27;ecg4ab6&#x27;</span>).encrypt(<span class="string">b&#x27;\x00&#x27;</span> * <span class="number">40</span>)</span><br><span class="line"> </span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>):</span><br><span class="line">    flag += <span class="built_in">chr</span>((enc_flag[i] + add_bytes[i]) &amp; <span class="number">0xff</span>) </span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment">#output:</span></span><br><span class="line"><span class="comment">#b&#x27;ecg4ab6&#x27;</span></span><br><span class="line"><span class="comment">#hgame&#123;Y0u&#x27;r3_re4l1y_g3t_0Ut_of_th3_upX!&#125;</span></span><br></pre></td></tr></table></figure>
<p>flag: hgame{Y0u’r3_re4l1y_g3t_0Ut_of_th3_upX!}</p>
]]></content>
      <categories>
        <category>-CTF</category>
      </categories>
      <tags>
        <tag>Reverse</tag>
      </tags>
  </entry>
</search>
